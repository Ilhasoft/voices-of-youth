# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-10-10 18:54
import random

import lorem
from django.conf import settings
from django.core.files.images import ImageFile
from django.db import migrations
from django.db import transaction
from django.db.utils import IntegrityError
from model_mommy import mommy
from model_mommy.random_gen import gen_string
from unipath import Path

from voicesofyouth.project.models import Project
from voicesofyouth.report.models import FILE_TYPES
from voicesofyouth.report.models import Report
from voicesofyouth.report.models import ReportComment
from voicesofyouth.report.models import ReportFile
from voicesofyouth.report.models import ReportURL
from voicesofyouth.theme.models import Theme
from voicesofyouth.translation.fields import CharFieldTranslatable
from voicesofyouth.translation.fields import TextFieldTranslatable
from voicesofyouth.translation.models import TranslatableField
from voicesofyouth.translation.models import Translation
from voicesofyouth.translation.models import create_translatable_model
from voicesofyouth.user.models import User

__author__ = 'Elton Pereira'
__email__ = 'eltonplima AT gmail DOT com'
__status__ = 'Development'


mommy.generators.add(TextFieldTranslatable, gen_string)
mommy.generators.add(CharFieldTranslatable, gen_string)

test_img = Path(__file__).absolute().ancestor(3).child('test', 'assets', 'python.png')
user = None


def make_translation(obj, lang):
    for field in TranslatableField.objects.filter(model__model=obj._meta.model_name):
        try:
            with transaction.atomic():
                mommy.make(Translation,
                           field=field,
                           content_object=obj,
                           language=lang,
                           translation=f'{lang} - {lorem.paragraph()}')
        except IntegrityError:
            pass

def make_report_medias(report):
    with open(test_img, 'rb') as image:
        fake_file = ImageFile(image)

        mommy.make(ReportFile,
                   title=lorem.sentence(),
                   description=lorem.paragraph(),
                   report=report,
                   created_by=user,
                   modified_by=user,
                   media_type=random.choice(FILE_TYPES)[0],
                   file=fake_file)

    mommy.make(ReportURL,
               report=report,
               created_by=user,
               modified_by=user,
               url='https://google.com')


def create_dev_data(apps, schema_editor):
    if settings.DEBUG:
        global user
        create_translatable_model(Project)
        create_translatable_model(Theme)
        with open(test_img, 'rb') as image, transaction.atomic():
            tags = ('trash',
                    'healthy',
                    'security',
                    'harzadous area',
                    'climate changes',
                    'star wars',
                    'crazy',
                    'anything')
            fake_thumbnail = ImageFile(image)
            user = mommy.make(User, username='faker', avatar=random.randint(0, 22), first_name='Fake', last_name='User')
            for x in range(random.randint(5, 10)):
                project = mommy.make(Project,
                                     name=f'Project {x}',
                                     thumbnail=fake_thumbnail,
                                     description=lorem.paragraph(),
                                     created_by=user,
                                     modified_by=user)
                for y in range(random.randint(5, 10)):
                    theme = mommy.make(Theme,
                                       project=project,
                                       name=f'Theme {y}',
                                       description=lorem.paragraph(),
                                       created_by=user,
                                       modified_by=user)
                    theme.tags.add(*random.choices(tags, (len(t) for t in tags), k=random.randint(1, 6)))
                    lang_idx = random.randint(0, len(settings.LANGUAGES) - 1)
                    lang = settings.LANGUAGES[lang_idx][0]
                    make_translation(theme, lang)
                    make_translation(project, lang)
                    for z in range(random.randint(1, 10)):
                        report = mommy.make(Report,
                                            name=f'Report {z}',
                                            description=lorem.paragraph(),
                                            theme=theme,
                                            created_by=user,
                                            modified_by=user)
                        report.tags.add(*random.choices(tags, (len(t) for t in tags), k=random.randint(1, 6)))
                        for _ in range(random.randint(1, 10)):
                            mommy.make(ReportComment,
                                       text=lorem.paragraph(),
                                       report=report,
                                       created_by=user,
                                       modified_by=user)
                        for _ in range(random.randint(1, 3)):
                            make_report_medias(report)


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        ('translation', '0001_initial'),
        ('project', '0002_auto_20171103_1505'),
        ('theme', '0002_auto_20171103_1505'),
        ('tag', '0001_initial'),
        ('report', '0002_auto_20171103_1505'),
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_dev_data)
    ]

